@header = '
#include "parsergen/grammar_ast.hpp"
using namespace Parsergen::AST;

namespace Parsergen {
'

@footer = '
}'

@class_name = 'GrammarParser'
@disable_left_recursion = 'true'

parser_definition[std::shared_ptr<ParserDefinition>]
    :  s=section* { std::make_shared<ParserDefinition>(s, POSITION) };

section[std::shared_ptr<Section>]
    :  s=statement_group { s };
    :  s=configuration { s };

configuration[std::shared_ptr<ConfigurationCall>]
    :  AT name=ID EQ value=STRING { std::make_shared<ConfigurationCall>(name.value, value.value, POSITION) };

statement_group[std::shared_ptr<StatementGroup>]
    :  name=ID return_type=RETURN_TYPE stmts=statement* { std::make_shared<StatementGroup>(name.value, return_type.value, stmts, POSITION) };

statement[std::shared_ptr<Statement>]
    :  COLON es=expr* a=ACTION? TERMINATE { std::make_shared<Statement>(es, getTokenValueOr(a, "<>"), POSITION) };

expr_list[std::shared_ptr<ExprList>]
    :  es=expr* { std::make_shared<ExprList>(es, POSITION) };

expr[std::shared_ptr<Expr>]
    :  name=ID EQ v=or_op { std::make_shared<NamedItem>(name.value, v, POSITION) };
    :  v=or_op { v };

or_op[std::shared_ptr<Expr>]
    :  star_op { p1 };

star_op[std::shared_ptr<Expr>]
    :  v=plus_op STAR { std::make_shared<ZeroOrMore>(v, POSITION) };
    :  v=plus_op { v };

plus_op[std::shared_ptr<Expr>]
    :  v=qmark_op PLUS { std::make_shared<OneOrMore>(v, POSITION) };
    :  v=qmark_op { v };

qmark_op[std::shared_ptr<Expr>]
    :  v=term QMARK { std::make_shared<ZeroOrOne>(v, POSITION) };
    :  v=term { v };

term[std::shared_ptr<Expr>]
    :  AND f=factor { std::make_shared<AndPredicate>(f, POSITION) };
    :  NOT f=factor { std::make_shared<NotPredicate>(f, POSITION) };
    :  f=factor { f };

factor[std::shared_ptr<Expr>]
    :  i=item { i };
    :  LPAREN es=expr_list RPAREN { es };

item[std::shared_ptr<Expr>]
    :  i=ID { std::make_shared<StatementPointer>(i.value, POSITION) };
    :  i=TOKEN { std::make_shared<TokenPointer>(i.value, POSITION) };
    :  i=STRING { std::make_shared<ConstantString>(i.value, POSITION) };